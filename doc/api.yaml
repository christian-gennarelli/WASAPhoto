openapi: '3.0.2'
info:
  title: WASAPhoto API Specifications
  description: |-
    Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! 
    You can upload your photos directly from your PC, and they will be visible to everyone following you.
  version: "1.0"

components:

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: Bearer token for authentication in WASAPhoto.
      bearerFormat: '^[a-z0-9]{64}$'
  schemas:
    
    ID:
      title: ID
      description: |-
        Autoincrement integer field used for identify a particular resource (a comment, a post, ecc.)
      type: integer
      example: 795739

    Username:
      title: Username
      description: Username of a user
      type: string
      example: "chri_genna02"
      minLength: 8
      maxLength: 16
      pattern: '^[a-zA-Z0-9_-]{8,16}$'

    User:
      title: User
      description: |-
        A user in WASAPhoto is represented by a unique ID, its unique username, name and birthdate.
      properties:
        uuid:
          $ref: '#/components/schemas/ID'
        username:
          $ref: '#/components/schemas/Username'
        profilePic:
          $ref: "#/components/schemas/Photo"
        name:
          description: Real-life name/surname of the user
          type: string
          pattern: ''
          minLength: 2
          maxLength: 32
          example: Christian Gennarelli 
        birthdate:
          description: Birthdate of the user
          $ref: '#/components/schemas/Date'
      
    UserList:
      title: UserList
      description: |-
        Collection of users. 
        A maximum number of 16 users is returned, according to some backend principle (example: datetime)
      type: array
      items:
        $ref: '#/components/schemas/User'  
      minItems: 0
      maxItems: 16 

    Photo:
      title: Photo
      format: binary
      type: string
      description: |-
        Binary representation of a photo, wrapped in a base64-encoded string. 
        Only multiple profile pics are sent via base64 in JSON for efficiency reasons.
        URL pointing to post images will be first sent, and then the client will have the ability
        to obtain the photo via a separate endpoint, i.e. GetPhotoFromURL.
      minLength: 0
      maxLength: 2000000 # 2MB photo
      example: iVBORw0KGgbW8gY2hyaXN0aWFuCghyaXN0aWFuCgw0KGgbW8gYyaXN0aWFuCgw0KGgbW8gW8gYyaXN0aW8gYyaXN0aWF

    PhotoURL:
      title: PhotoURL
      type: string
      description: |-
        URL of the photo, actually stored on server-side.
        The actual image will be sent as response of a separate request.
      minLength: 45 # http://WASAPhotoserver.com/photos/posts/1.png
      maxLength: 60 # http://WASAPhotoserver.com/photos/profile_pics/999999999.png
      example: "http://WASAPhotoserver.com/photos/profile_pics/default.png"
    Profile:
      title: Profile
      description: |-
        Profile of an user, made up of its informations and the its posts on WASASPhoto.
      properties:
        user:
          $ref: "#/components/schemas/User"
        post_ids:
          type: array
          description: |- 
            Collection of the posts posted by this user.
            At most 16 posts are returned at each request, according to some backend principle (example: datetime)
          items:
            $ref: '#/components/schemas/PostsStream'
          minItems: 0
          maxItems: 16

    Post:
      title: Post
      description: |-
        Post containing a photo, alongside the user that made it, its description and its date of creation.
      properties:
        postid:
          $ref: '#/components/schemas/ID'
        photo: 
          $ref: "#/components/schemas/PhotoURL"
        creation-datetime: # Useful for the representation of the poststream, which must be displayed in reverse chronological order
          description: |-
            Date and time at which this post was created.
          $ref: '#/components/schemas/Datetime'
        description:
          description: Description of the photo provided by the user (if existing).
          type: string
          minLength: 0
          maxLength: 128
          pattern: ''

    PostsStream:
      title: Stream
      description: |-
        Stream of posts.
        Only 16 posts are returned at each request.
      type: array
      items:
        $ref: '#/components/schemas/Post'
      minItems: 0
      maxItems: 16

    Comment:
      title: Comment
      description: |-
        Comment on a post, made up of its body, its author and the datetime of creation.
      properties:
        post_id:
          $ref: '#/components/schemas/ID'
        body:
          description: Content of the posted comment
          type: string
          minLength: 1
          maxLength: 128
          pattern: ''
        creation-datetime: # Useful for the representation of the poststream, which must be displayed in reverse chronological order
          description: |-
            Date and time at which this comment was created.
          $ref: '#/components/schemas/Datetime'
        author:
          $ref: '#/components/schemas/Username'
    
    CommentList:
      title: CommentsList
      description: |-
        A list of comments.
        Only 16 comments are returned at each request.
      type: array
      items:
        $ref: '#/components/schemas/Comment'
      minItems: 0
      maxItems: 16

    Date:
      title: date
      description: Date.
      example: "2023-11-29"
      type: string
      format: date
      pattern: '^([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'
      minLength: 10
      maxLength: 10  

    Datetime:
      title: datetime
      description: |-
        Date and time.
      example: "2023-11-29 23:00:00"
      type: string
      format: date-time
      pattern: '^([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01]) (0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$'
      minLength: 19
      maxLength: 19  

    Error:
      title: Error
      description: |-
        Schema defining what is an error when returned in response of a HTTP requests.
      properties:
        code: # Code returned by the server
          type: string
          description: Status code returned directly by the server(s).
          example: "404"
          minLength: 3
          maxLength: 3
        description:  
          type: string
          description: |- 
            Description of the error in human-readable language.
          example: 'Username not found. Please check that the username is correct, and try again.'
          minLength: 1
          maxLength: 128
          pattern: ''

paths:
  /session:
    post:
      operationId: doLogin
      tags: ['LOGIN']
      summary: Login
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      requestBody:
        description: User details (here, just the username)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Username'
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'
        '400': # Not acceptable
          description: Content not conformed to the criteria specified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': # Internal server error
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/:
    parameters:
      - in: query
        name: searched_username
        description: Username that the authenticated user is trying to find.
        schema:
          $ref: '#/components/schemas/Username'
    get:
      operationId: searchUser
      tags: ['USER']
      summary: Search for a user
      description: |-
        A particular user - here, "username" - can research another user - here, "searched-user" - 
        or a set of users by their usernames matching the substring provided.
      responses:
        '200': # OK
          description: List of returned usernames matching the provided substring.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/UserList'
        '204': # Content not found
          description: No user has been found with such a substring in their usernames.
        '400': # Bad request provided
          description: The request cannot be processed.
          content:  
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401': # Unauthenticated
          description: The client has not been authenticated (yet).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404': # Content not found
          description: Provided username not found. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': # Internal server error.
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/{username}/stream:
    parameters:
      - in: path
        name: username
        description: Username of the user trying to display its stream.
        schema:  
          $ref: '#/components/schemas/Username'
        required: true
      - in: query
        name: datetime
        description: |-   
          Datetime up to which posts will be included in the user's stream.
          (The ending datetime is implicit: now! In this way, in the stream
          will be inclued all photos posted from 'start-datetime' up to now.)
        schema: 
          $ref: '#/components/schemas/Datetime'
        required: true

    get:
      operationId: getMyStream
      description: Update and display the stream of posts for the authenticated usernames.
      summary: It allows for the user to get its main stream of posts diplayed on the home page.
      tags: ['STREAM']
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: datetime
          schema:
            $ref: '#/components/schemas/Datetime'
          required: false
      responses:
        '200': # OK 
          description: Stream of posts is correctly returned to the user client.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostsStream'
        '204': # No content
          description: No posts have been found to be posted by the user's followings from the provided starting datetime.
        '400': # Bad request
          description: The request cannot be processed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401': # Unauthenticated
          description: The client is NOT authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403': # Unauthorized
          description: |-
            The client is not authorized to see the stream of another user.
            That is, the authenticated username and the one provided in the path do NOT coincide.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': # Internal server error.
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{username}/profile/:
    parameters:
      - in: path
        name: username
        description: The user's username.
        schema:
          $ref: '#/components/schemas/Username'
        required: true
      
    get:
      operationId: getUserProfile
      tags: ['PROFILE']
      summary: See user profile
      description: |-
        Return all the informations about the specified user, 
        included its username, real name and date of birth.
      security:
        - BearerAuth: [] # We ask for the Auth token to check if the user has -been- banned
      responses:
        '200': # OK - Profile found
            description: Returned profile of the searched user.
            content:
              application/json:
                schema: 
                  $ref: '#/components/schemas/Profile'
        '400': # Bad request
          description: The request cannot be processed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401': # Unauthenticated
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403': # Unauthorized
          description: Authenticated user is not authorized to see the profile of the requested user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404': # Profile not found
          description: |-
              No user has been found with the provided username, 
              thus no information can be returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': # Internal server error.
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      operationId: setMyUserName
      tags: ['PROFILE']
      summary: Update username
      description: |-
        A user can change its username with a new one
        (provided that the new one is valid and not already used).
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: new_username
          schema:
            $ref: '#/components/schemas/Username'
      responses: 
        '201': # OK - Username updated
          description: New username of this user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Username'
        '400': # Bad request
          description: Bad request provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401': # Unauthenticated
          description: The client has not been authenticated (yet).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403': # Unauthorized
          description: |-
            The authenticated user cannot change the username of another user.
            That is, the authenticated username and the one provided in the path do NOT coincide.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404': # Profile not found
          description: |-
              No user has been found with the provided username, 
              thus no information can be returned. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406': # New username provided already in use
          description: |- 
            The "new_username" provided has been found to be already in use in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': # Internal server error.
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/{username}/profile/posts/:
    parameters:
      - in: path
        name: username
        description: Username provided in the path.
        schema:
          $ref: '#/components/schemas/Username'
        required: true

    put:
      operationId: uploadPhoto
      summary: Upload a new post
      tags: ['POST']
      description: |-
          The user can upload a new post for its own profile. 
          The photo and its description must be sent by the client.
      security:
        - BearerAuth: []
      requestBody:
        description: |- 
          The photo to be uploaded, along with its description (if wanted).
        content:
          multipart/form-data:
            schema:
              description: Photo and its description.
              type: object
              properties:
                photo:
                  $ref: "#/components/schemas/Photo"
                description: 
                  $ref: '#/components/schemas/Comment'
      responses:
        '201': # OK Created
          description: The post is correctly created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400': # Bad request
          description: Bad request provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401': # Unauthenticated
          description: The client is NOT authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403': # Unauthorized
          description: |-
            The authenticated user cannot upload a new post on some other user's profile.
            That is, the authenticated username and the one provided in the path do NOT coincide.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404': # Username not found
          description: |-
            The user who wants to post a photos on its profile has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': # Internal server error.
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{username}/profile/posts/{post_id}/:  
    parameters:
        - in: path
          name: username
          schema:
            $ref: '#/components/schemas/Username'
          required: true
        - in: path
          name: post_id
          schema:
            $ref: '#/components/schemas/ID'
          required: true
  
    delete:
      operationId: deletePhoto
      tags: ['POST']
      summary: Delete an already posted post
      description: |-
        Delete from the user's profile a post that it previously posted somewhen in the past.
      security:
        - BearerAuth: []
      responses:
        '204': # OK - No content to be returned
          description: User successfully deleted one of its posts.
        '400': # Bad request
          description: Bad request provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401': # Unauthenticated
          description: The client is NOT authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403': # Unauthorized
          description: |-
            The authenticated user cannot delete a photo of another user.
            That is, the authenticated username and the one provided in the path do NOT coincide.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404': # Username or post not found
          description: Either the post to be deleted or the user who is trying to delete it (or both) has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': # Internal server error.
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{username}/profile/posts/{post_id}/likes/:
    parameters:
      - in: path
        name: username
        schema:
          $ref: '#/components/schemas/Username'
        required: true
      - in: path
        name: post_id
        schema:
          $ref: '#/components/schemas/ID'
        required: true

    get:
      operationId: getPostLikes
      summary: Get list of likes of a post
      tags: ['POST']
      description: |-
        Return the list of users which liked the provided post.
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: datetime
          schema:
            $ref: '#/components/schemas/Datetime'
          required: false
      responses:
        '201': # OK Found
          description: |-
            The list of users liking the provided post is correctly returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        '204': # No content found
          description: No user liked the given post.
        '400': # Bad request
          description: Bad request provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401': # Unauthenticated
          description: The client is NOT authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403': # Unauthorized
          description: |-
            The authenticated user banned the owner of the post, or viceversa.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404': # Username or post not found
          description: |- 
            Either the post to be liked or the username has not been found. 
            Alternatively, the username provided in the path does not own the given post.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': # Internal server error.
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      operationId: likePhoto
      tags: ['POST']
      summary: Like a post
      description: |-
        Authenticated users can like other users' posts.
      security:
        - BearerAuth: []
      responses:
        '204': # OK - Photo liked
          description: Authenticated user successfully liked the provided post.
        '400': # Bad request
          description: Bad request provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401': # Unauthenticated
          description: The client is NOT authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403': # Unauthorized
          description: |-
            The authenticated user banned the owner of the post, or viceversa.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404': # Content not found
          description: |-
            Either the username or the post have not been found.
            Alternatively, the username in the path does NOT own the provided post.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': # Internal server error.
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{username}/profile/posts/{post_id}/likes/{liker_username}:
    parameters:
      - in: path
        name: username
        schema:
          $ref: '#/components/schemas/Username'
        description: Username of the owner of the post
        required: true
      - in: path
        name: post_id
        schema:
          $ref: '#/components/schemas/ID'
        description: ID of the post
        required: true
      - in: path
        name: liker_username
        schema:
          $ref: '#/components/schemas/Username'
        description: Username of the user that liked username's post with id post_id and now wants to delete its like from it.
        required: true

    delete:
      operationId: unlikePhoto
      tags: ['POST']
      summary: Unlike a post
      description: |-
        Delete 'liker_username' from the list of likers of 'username's post.
      security:
        - BearerAuth: []
      responses:
        '204': # OK
          description: User successfully deleted one of its posts.
        '400': # Bad request
          description: Bad request provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401': # Unauthenticated
          description: The client is NOT authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403': # Unauthorized
          description: |-
            The authenticated user cannot unlike the post on behalf of another user.
            That is, the authenticated username and the liker one do NOT coincide.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404': # Username or post not found
          description: Either the post to be unliked or the owner of the post ha not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': # Internal server error.
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        
  /users/{username}/profile/posts/{post_id}/comments/:
    parameters:
      - in: path
        name: username
        schema:
          $ref: '#/components/schemas/Username'
        required: true
      - in: path
        name: post_id
        schema:
          $ref: '#/components/schemas/ID'
        required: true

    get:
      operationId: getPostComments
      tags: ['POST']
      summary: Get comments under a post
      description: |-
        Return the list of the comments under the post with id 'post_id' of 'username'.
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: datetime
          schema:
            $ref: '#/components/schemas/Datetime'
          required: false
      responses:
        '200': # OK
            description: Return the list of comments under the post.
            content:
              application/json:
                schema: 
                  $ref: '#/components/schemas/CommentList'
        '201': # No content
          description: No comment was found under the given post.
        '400': # Bad request
          description: The request cannot be processed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401': # Unauthenticated
          description: The client is NOT authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403': # Unauthorized
          description: |-
            The authenticated user banned the owner of the post, or viceversa.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404': # User or pst not found
          description: Either the post or the username provided in the path has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': # Internal server error.
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      
    post:
      operationId: commentPhoto
      tags: ['POST']
      summary: Comment a post
      description: |-
        A new comment is created under the post of the given user provided in the path.
        Just the body of the comment must be provided (along with the Auth token).
      security:
        - BearerAuth: []
      requestBody:
        content:
          text/plain:
            schema:
              description: Content of the posted comment
              type: string
              minLength: 1
              maxLength: 128
              pattern: ''
      responses:
        '204': # OK Created
          description: User 'commenter_username' successfully commented 'username's photo.
        '400': # Bad request
          description: Bad request provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401': # Unauthenticated
          description: The client is NOT authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403': # Unauthorized
          description: |-
            The authenticated user banned the owner of the post, or viceversa.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404': # Content not found
          description: Either the username or the post has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '415': # Unsupported media type
          description: |-
            The content of the request body should be in JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': # Internal server error.
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/{username}/profile/posts/{post_id}/comments/{comment_id}:
    parameters:
      - in: path
        name: username
        schema:
          $ref: '#/components/schemas/Username'
        required: true
      - in: path
        name: post_id
        schema:
          $ref: '#/components/schemas/ID'
        required: true
      - in: path 
        name: comment_id
        schema:
          $ref: '#/components/schemas/ID'
        required: true

    delete:
      operationId: uncommentPhoto
      summary: Uncomment a post
      description: |-
        Delete a comment under a post.
      tags: ['POST']
      security:
        - BearerAuth: []
      responses:
        '204': # OK
          description: Authenticated user successfully deleted (one of) its own comment(s) under the post.
        '400': # Bad request
          description: Bad request provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401': # Unauthenticated
          description: The client is NOT authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403': # Unauthorized
          description: |-
            The authenticated user cannot delete a comment of another user.
            That is, the authenticated username and the one provided in the path do NOT coincide.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404': # Username or post not found
          description: Either the post or the owner of the post has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': # Internal server error.
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{username}/followings/:
    parameters:
      - in: path
        name: username
        schema:
          $ref: '#/components/schemas/Username'
        required: true

    get:
      operationId: getFollowingList
      tags: ['FOLLOW']
      summary: Get the following list
      description: |-
        Return the list of the users that username follows.
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: datetime
          schema:
            $ref: '#/components/schemas/Datetime'
          required: false
      responses:
        '200': # OK Found
          description: |-
            The following list if correctly returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        '204': # No content found
          description: This user does not follow any user.
        '400': # Bad request
          description: Bad request provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401': # Unauthenticated
          description: The client is NOT authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403': # Unauthorized
          description: |-
            The authenticated user banned the user provided in the path, or viceversa.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404': # Username not found
          description: Username has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': # Internal server error.
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
    put: 
      operationId: followUser
      summary: Follow a new user
      tags: ['FOLLOW']
      description: |-
        Add the user provided in the query to the followings list of the authenticated user.
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: followed_username
          schema: 
            $ref: '#/components/schemas/Username'
      responses:
        '204': # OK Created
          description: User 'username' successfully started to follow 'following_username'.
        '400': # Bad request
          description: Bad request provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401': # Unauthenticated
          description: The client is NOT authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403': # Unauthorized
          description: |-
            The authenticated user cannot follow another user on behalf of some other user.
            That is, the authenticated user's username and the one provided in the path do NOT coincide.
            Alternatively, it could happen that the authenticated user banned the user is trying to follow, or viceversa.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404': # Content not found
          description: The username has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': # Internal server error.
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/{username}/followings/{followed_username}:
    parameters:
        - in: path
          name: username
          schema:
            $ref: '#/components/schemas/Username'
          required: true
        - in: path
          name: followed_username
          schema:
            $ref: '#/components/schemas/Username'
          required: true
    
    delete: 
      operationId: unfollowUser
      tags: ['FOLLOW']
      summary: Unfollow an user
      description: |-
        Delete the authenticated user from the list of followings of the one provided in the path.
      security:
        - BearerAuth: []
      responses:
        '204': # OK
          description: The authenticated user successfully unfollowed the user.
        '400': # Bad request
          description: Bad request provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401': # Unauthenticated
          description: The client is NOT authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403': # Unauthorized
          description: |-
            The authenticated user cannot unfollow an user on behalf of another user.
            That is, the authenticated username and the one provided in the path do NOT coincide.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': # Internal server error.
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/{username}/followers/:
    parameters:
      - in: path
        name: username
        schema:
          $ref: '#/components/schemas/Username'
        required: true
    
    get: 
      operationId: getFollowersList
      tags: ['FOLLOW']
      summary: Get the list of followers
      description: |-
        Return the list of followers of the given username
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: datetime
          schema:
            $ref: '#/components/schemas/Datetime'
          required: false
      responses:
        '200': # OK
          description: Followers list successfully returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        '400': # Bad request
          description: Bad request provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401': # Unauthenticated
          description: The client is NOT authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403': # Unauthorized
          description: |-
            The authenticated user banned the username provided in the path, or viceversa.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404': # Username or post not found
          description: Either the post to be uncommented or the owner of the post has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': # Internal server error.
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/{username}/banned/:
    parameters:
        - in: path
          name: username
          schema:
            $ref: '#/components/schemas/Username'
          required: true

    get:
      operationId: getBanUserList
      tags: ['BAN']
      summary: Return user banlist.
      description: |-
        Return the list of banned users for the specified user.
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: datetime
          schema:
            $ref: '#/components/schemas/Datetime'
          required: false
      responses:
        '201': # OK
          description: The list of banned users is successfully returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        '204':
          description: The user has banned no other user.
        '400': # Bad request
          description: Bad request provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401': # Unauthenticated
          description: The client is NOT authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403': # Unauthorized
          description: |-
            The authenticated user cannot see banned users of some other user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': # Internal server error.
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put: 
      operationId: banUser
      tags: ['BAN']
      summary: Ban a new user
      description: |-
        Add a new user - here, 'ban_username' - in the list of the banned users for 'username'.
      parameters:
        - in: query
          name: banned_username
          description: Username of the user that must be added to the list of the banned users for this user.
          schema:
            $ref: '#/components/schemas/Username'
          required: true
      security:
        - BearerAuth: []
      responses:
        '204': # OK Created
          description: User 'banned_username' has been successfully added to the ban list.
        '400': # Bad request
          description: Bad request provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401': # Unauthenticated
          description: The client has not been authenticated (yet).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403': # Unauthorized
          description: |-
            The authenticated user cannot ban another user on behalf of some other user.
            That is, the authenticated user's username and banned_username do NOT coincide.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404': # Content not found
          description: Either one of the two usernames has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': # Internal server error.
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
  /users/{username}/banned/{banned_username}:
    parameters:
        - in: path
          name: username
          schema:
            $ref: '#/components/schemas/Username'
          required: true
        - in: path
          name: banned_username
          schema:
            $ref: '#/components/schemas/Username'
          required: true
    
    delete: 
      operationId: unbanUser
      tags: ['BAN']
      summary: Unban an user
      description: |-
        Delete a user - here, 'banned_username' - from the banned list of the user 'username'.
      security:
        - BearerAuth: []
      responses:
        '204': # OK
          description: User successfully removed banned_username from its ban list.
        '400': # Bad request
          description: Bad request provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401': # Unauthenticated
          description: The client has not been authenticated (yet).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403': # Unauthorized
          description: |-
            The authenticated user cannot unban another user on behalf of some other user.
            That is, the authenticated user's username and the one provided in the path do NOT coincide.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': # Internal server error.
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /photos/{photo_path}:
    parameters:
      - in: path
        name: photo_path
        description: |-
          URL path of the requested photo.
        schema:
          type: string
          minLength: 11 # 6 (posts/) + 4 (x.png) -> posts/1.png
          maxLength: 33 # 13 ("profile_pics/") + 16 (max username length) -> profile_pics/wasaphotoexample.png
          pattern: ''
          example: "profile_pics/wasaphotoexample.png"
        required: true
    
    get:
      operationId: GetPhotoFromURL
      tags: ['PHOTO']
      summary: Get the requested photo
      description: |-
        Given the URL path to the server resource representing the requested photo,
        sent it to the requesting client.
      responses:
        '200': # OK 
          description: The photo was found, thus sent to the client.
          content:
            image/png:
              schema: 
                description: Requested photo (in PNG).
                type: string
                format: binary
        '400': # Bad request
          description: Provided path not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404': # Photo not found
          description: Requested photo has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': # Internal server error
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
